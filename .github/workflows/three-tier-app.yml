name: "Three-tier App Workflow"

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "Name of AWS region"
        required: true
        default: "us-west-2"
      aws_env:
        description: "Name of AWS environment"
        required: true
        default: "staging"

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.aws_env }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Map non-secret Terraform outputs to a job output
    outputs:
      external_lb: ${{ steps.tf-output.outputs.EXTERNAL_LB }}
      internal_lb: ${{ steps.tf-output.outputs.INTERNAL_LB }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # Install Terraform linter
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: v0.44.1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Initialize Terraform
        run: terraform init

      # Initialize Terraform linter
      - name: Initialize TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Check Terraform file formatting
        run: terraform fmt -check

      # Run Terraform linter
      - name: Run TFLint
        run: tflint --recursive --format compact

      # Generates an execution plan for Terraform
      - name: Generate Terraform plan
        run: |
          terraform plan \
            -var 'region=${{ github.event.inputs.aws_region }}' \
            -var 'environment=${{ github.event.inputs.aws_env }}' \
            -input=false -out=three-tier.tfplan

        # Build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Apply Terraform plan
        run: terraform apply -auto-approve -input=false three-tier.tfplan

      # Register Terraform outputs that will be passed to Ansible job
      - name: Register Terraform outputs
        id: tf-output
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "EXTERNAL_LB=$(terraform output external_lb_endpoint)" >> "$GITHUB_OUTPUT"
          echo "INTERNAL_LB=$(terraform output internal_lb_endpoint)" >> "$GITHUB_OUTPUT"
          gh secret set --env ${{ github.event.inputs.aws_env }} db_host < terraform output -raw db_host
          gh secret set --env ${{ github.event.inputs.aws_env }} db_user < terraform output -raw db_user
          gh secret set --env ${{ github.event.inputs.aws_env }} db_password < terraform output -raw db_password
